buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


def loadStringPropertyOrPlaceholder(String name) {
    return rootProject.hasProperty(name) ? rootProject.property(name) : "MISSING"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.gbaldera.yts"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        buildConfigField("String", "TRAKT_API_KEY", "\"${loadStringPropertyOrPlaceholder("TRAKT_API_KEY")}\"")
        buildConfigField("String", "PARSE_APP_ID", "\"${loadStringPropertyOrPlaceholder("PARSE_APP_ID")}\"")
        buildConfigField("String", "PARSE_CLIENT_KEY", "\"${loadStringPropertyOrPlaceholder("PARSE_CLIENT_KEY")}\"")
        buildConfigField("String", "AD_UNIT_ID", "\"${loadStringPropertyOrPlaceholder("AD_UNIT_ID")}\"")
        buildConfigField("String", "AD_TEST_DEVICE_ID", "\"${loadStringPropertyOrPlaceholder("AD_TEST_DEVICE_ID")}\"")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name != "debug") {
                output.outputFile = new File(
                        output.outputFile.parent,
                        "${variant.applicationId}-v${variant.versionName}.apk"
                )
            }
        }
    }

    signingConfigs{
        release{
            if(rootProject.file('keystore.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if(rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            debuggable true
        }
    }
}

dependencies {
    compile project(':libraries:androidutils')
    compile project(':libraries:updatechecker')

    compile files('libs/underscore.jar')
    compile files('libs/Parse-1.8.0.jar')

    compile 'com.parse.bolts:bolts-android:1.1.4'

    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:palette-v7:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.2'
    compile 'com.android.support:support-v13:21.0.2'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.google.android.gms:play-services:6.+'

    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.jakewharton.timber:timber:2.5.0'

    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'

    compile 'com.github.gabrielemariotti.changeloglib:library:1.5.2'

    compile 'com.uwetrottmann:trakt-java:4.2.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.0@aar') {
        transitive = true;
    }
}
